name: Deploy to GCP - PROD
on:
  workflow_call:
permissions: write-all
jobs:
  init:
    name: Initialization
    uses: ./.github/workflows/ext-initialization-pipeline-properties.yml
  destroy:
    needs: init
    name: Destroy resources
    if: needs.init.outputs.destroy != 'false'
    uses: ./.github/workflows/ext-gcp-destroy-service.yml
    with:
      environment: prod
      region: ${{ needs.init.outputs.region }}
    secrets:
      project-number: ${{ secrets.GCP_PROJECT_NUMBER_PROD }}
      project-name: ${{ secrets.GCP_PROJECT_NAME }}
      service-name: ${{ secrets.GCP_SERVICE_NAME }}
  settings:
    needs: init
    name: Load application settings
    if: needs.init.outputs.destroy == 'false'
    uses: ./.github/workflows/ext-load-application-settings.yml
    with:
      environment: prod
  deploy:
    needs:
      - init
      - settings
    name: Deploy
    if: needs.init.outputs.destroy == 'false'
    uses: ./.github/workflows/ext-gcp-deploy-service.yml
    with:
      environment: prod
      region: ${{ needs.init.outputs.region }}
      scaling-memory: ${{ needs.settings.outputs.scaling-memory }}
      scaling-min-instances: ${{ needs.settings.outputs.scaling-min-instances }}
      scaling-max-instances: ${{ needs.settings.outputs.scaling-max-instances }}
      port: ${{ needs.settings.outputs.port }}
      scaling-timeout: ${{ needs.settings.outputs.scaling-timeout }}
      enable-ssl: ${{ needs.settings.outputs.enable-ssl }}
      execution-environment: ${{ needs.settings.outputs.execution-environment }}
      ingress: ${{ needs.settings.outputs.ingress }}
      scaling-cpu: ${{ needs.settings.outputs.scaling-cpu }}
      scaling-concurrency: ${{ needs.settings.outputs.scaling-concurrency }}
      cpu-throttling: ${{ needs.settings.outputs.cpu-throttling }}
      service-account: ${{ needs.settings.outputs.service-account }}
      instances: ${{ needs.settings.outputs.instances }}
      env-vars-file: ${{ needs.settings.outputs.env-vars-file }}
      registry: us-docker.pkg.dev
    secrets:
      project-number: ${{ secrets.GCP_PROJECT_NUMBER_PROD }}
      project-name: ${{ secrets.GCP_PROJECT_NAME }}
      service-name: ${{ secrets.GCP_SERVICE_NAME }}
      token: ${{ secrets.GH_PRECURSORA_DEFAULT_PAT }}
  custom-command:
    needs:
      - settings
      - deploy
    name: Custom command
    if: always() && needs.deploy.result == 'success'
    uses: ./.github/workflows/ext-gcp-execute-job-custom-command.yml
    with:
      command-entrypoint: ${{ needs.settings.outputs.command-entrypoint }}
      command-args: ${{ needs.settings.outputs.command-args }}
      region: ${{ needs.deploy.outputs.region }}
      instances: ${{ needs.settings.outputs.instances }}
      service-account: ${{ needs.settings.outputs.service-account }}
      registry: us-docker.pkg.dev
      environment: prod
      env-vars-file: ${{ needs.settings.outputs.env-vars-file }}
    secrets:
      project-number: ${{ secrets.GCP_PROJECT_NUMBER_PROD }}
      project-name: ${{ secrets.GCP_PROJECT_NAME }}
      service-name: ${{ secrets.GCP_SERVICE_NAME }}
  create-tag:
    needs: custom-command
    if: always() && needs.custom-command.result == 'success'
    name: Create tag
    uses: ./.github/workflows/ext-create-tag.yml
    secrets: inherit
  finish-deploy:
    name: Finish deploy
    needs:
      - create-tag
      - destroy
    if: always() && (needs.create-tag.result == 'success' || needs.destroy.result == 'success')
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - run: echo "‚è≥ Finalizando deploy..."
