name: Build and Deploy to GCP - DEV
on:
  workflow_call:
    inputs:
      GCP_REGISTRY:
        required: false
        type: string
        default: us-docker.pkg.dev
      ENVIRONMENT:
        required: false
        type: string
        default: dev
    secrets:
      GCP_PROJECT_NUMBER_DEV:
        required: true
      GCP_PROJECT_NAME:
        required: true
      GCP_SERVICE_NAME:
        required: true
env:
  PROJECT_NUMBER: ${{ secrets.GCP_PROJECT_NUMBER_DEV }}
  PROJECT_NAME: ${{ secrets.GCP_PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}-${{ inputs.ENVIRONMENT }}
  IMAGE_PATH: ${{ inputs.GCP_REGISTRY }}/${{ secrets.GCP_PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/${{ secrets.GCP_PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/${{ secrets.GCP_SERVICE_NAME }}-${{ inputs.ENVIRONMENT }}:${{ github.sha }}
permissions: write-all
jobs:
  init:
    name: Initialization
    uses: ./.github/workflows/ext-initialization-application-properties.yml
    with:
      environment: ${{ inputs.ENVIRONMENT }}
  settings:
    needs: init
    if: ${{ needs.init.outputs.destroy != 'true' }}
    name: Load application settings
    uses: ./.github/workflows/ext-load-application-settings.yml
    with:
      environment: ${{ inputs.ENVIRONMENT }}
  validate-composer:
    needs: settings
    name: Validate / Composer
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating composer.json and composer-lock.json
        run: cd app && composer validate --strict
  validate-composer-cache:
    needs: settings
    name: Validate / Composer Cache
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating composer cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-
  validate-install-dependencies:
    needs: settings
    name: Validate / Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating dependencies
        run: |
          cd app 
          COMPOSER_AUTH="{\"github-oauth\":{\"github.com\":\"${{ secrets.GH_REPO_ADMIN_TOKEN }}\"}}" composer install --no-progress
  validate-phpmd:
    needs: settings
    name: Validate / PHPMD
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Executing PHPMD
        uses: GeneaLabs/action-reviewdog-phpmd@1.0.0
        with:
          github_token: ${{ github.token }}
          level: warning
          reporter: github-check
          standard: cleancode,codesize,controversial,design,naming,unusedcode
          target_directory: app/app/
  test-unit:
    needs:
      - settings
      - validate-composer
      - validate-composer-cache
      - validate-install-dependencies
      - validate-phpmd
    name: Test / Unit
    runs-on: ubuntu-latest
    if: ${{ needs.settings.outputs.test-disable-unit != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installing dependencies
        run: |
          cd app
          COMPOSER_AUTH="{\"github-oauth\":{\"github.com\":\"${{ secrets.GH_REPO_ADMIN_TOKEN }}\"}}" composer install --no-progress
      - name: Run unit tests
        run: |
          cd app
          XDEBUG_MODE="coverage" composer run test-unit
  test-mutation:
    needs:
      - settings
      - validate-composer
      - validate-composer-cache
      - validate-install-dependencies
      - validate-phpmd
    name: Test / Mutation
    runs-on: ubuntu-latest
    if: ${{ needs.settings.outputs.test-disable-mutation != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Installing infection
        run: |
          curl -sSL -O https://github.com/infection/infection/releases/download/0.27.0/infection.phar
          chmod a+x infection.phar
          mv infection.phar /usr/local/bin/infection
      - name: Installing dependencies
        run: |
          cd app
          COMPOSER_AUTH="{\"github-oauth\":{\"github.com\":\"${{ secrets.GH_REPO_ADMIN_TOKEN }}\"}}" composer install --no-progress
      - name: Run mutation tests
        run: |
          cd app
          composer run test-mutation
  deploy:
    needs:
      - test-unit
      - test-mutation
      - settings
    name: Deploy to DEV
    if: always() && needs.settings.result == 'success' && ((needs.settings.outputs.test-disable-unit == 'true' && needs.test-mutation.result == 'success') || (needs.settings.outputs.test-disable-mutation == 'true' && needs.test-unit.result == 'success') || (needs.settings.outputs.test-disable-unit == 'true' && needs.settings.outputs.test-disable-mutation == 'true') || (needs.test-unit.result == 'success' && needs.test-mutation.result == 'success'))
    uses: ./.github/workflows/ext-gcp-deploy-service.yml
    with:
      environment: ${{ inputs.ENVIRONMENT }}
      region: ${{ needs.settings.outputs.region }}
      scaling-memory: ${{ needs.settings.outputs.scaling-memory }}
      scaling-min-instances: ${{ needs.settings.outputs.scaling-min-instances }}
      scaling-max-instances: ${{ needs.settings.outputs.scaling-max-instances }}
      port: ${{ needs.settings.outputs.port }}
      scaling-timeout: ${{ needs.settings.outputs.scaling-timeout }}
      enable-ssl: ${{ needs.settings.outputs.enable-ssl }}
      execution-environment: ${{ needs.settings.outputs.execution-environment }}
      ingress: ${{ needs.settings.outputs.ingress }}
      scaling-cpu: ${{ needs.settings.outputs.scaling-cpu }}
      scaling-concurrency: ${{ needs.settings.outputs.scaling-concurrency }}
      cpu-throttling: ${{ needs.settings.outputs.cpu-throttling }}
      service-account: ${{ needs.settings.outputs.service-account }}
      instances: ${{ needs.settings.outputs.instances }}
      registry: ${{ inputs.GCP_REGISTRY }}
    secrets:
      project-number: ${{ secrets.GCP_PROJECT_NUMBER_DEV }}
      project-name: ${{ secrets.GCP_PROJECT_NAME }}
      service-name: ${{ secrets.GCP_SERVICE_NAME }}
      token: ${{ secrets.GH_PKG_ADMIN_TOKEN }}
  custom-command-execution:
    needs:
      - settings
      - deploy
    name: Custom command execution
    uses: ./.github/workflows/ext-gcp-execute-job-custom-command.yml
    with:
      command-entrypoint: ${{ needs.settings.outputs.command-entrypoint }}
      command-args: ${{ needs.settings.outputs.command-args }}
      region: ${{ needs.settings.outputs.region }}
      instances: ${{ needs.settings.outputs.instances }}
      service-account: ${{ needs.settings.outputs.service-account }}
      registry: ${{ inputs.GCP_REGISTRY }}
      environment: ${{ inputs.ENVIRONMENT }}
    secrets:
      project-number: ${{ secrets.GCP_PROJECT_NUMBER_DEV }}
      project-name: ${{ secrets.GCP_PROJECT_NAME }}
      service-name: ${{ secrets.GCP_SERVICE_NAME }}
  destroy:
    needs: init
    name: Destroy resources
    if: ${{ needs.init.outputs.destroy == 'true' }}
    uses: ./.github/workflows/ext-gcp-destroy-service.yml
    with:
      environment: ${{ inputs.ENVIRONMENT }}
      region: ${{ needs.init.outputs.region == 'true' }}
    secrets:
      project-number: ${{ secrets.GCP_PROJECT_NUMBER_DEV }}
      project-name: ${{ secrets.GCP_PROJECT_NAME }}
      service-name: ${{ secrets.GCP_SERVICE_NAME }}
  create-pr:
    needs:
      - custom-command-execution
      - destroy
    if: always() && ((needs.custom-command-execution.result == 'success') || needs.destroy.result == 'success')
    name: Create PR to Main
    uses: ./.github/workflows/ext-create-pull-request-to-main.yml
