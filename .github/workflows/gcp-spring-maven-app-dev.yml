name: Build and Deploy to GCP - DEV
on:
  workflow_call:
    inputs:
      GCP_REGISTRY:
        required: false
        type: string
        default: us-docker.pkg.dev
      ENVIRONMENT:
        required: false
        type: string
        default: dev
    secrets:
      GCP_PROJECT_NUMBER_DEV:
        required: true
      GCP_PROJECT_NAME:
        required: true
      GCP_SERVICE_NAME:
        required: true
env:
  PROJECT_NUMBER: ${{ secrets.GCP_PROJECT_NUMBER_DEV }}
  PROJECT_NAME: ${{ secrets.GCP_PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}-${{ inputs.ENVIRONMENT }}
  IMAGE_PATH: ${{ inputs.GCP_REGISTRY }}/${{ secrets.GCP_PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/${{ secrets.GCP_PROJECT_NAME }}-${{ inputs.ENVIRONMENT }}/${{ secrets.GCP_SERVICE_NAME }}-${{ inputs.ENVIRONMENT }}:${{ github.sha }}
permissions: write-all
jobs:
  init:
    name: Initialization
    runs-on: ubuntu-latest
    outputs:
      destroy: ${{ fromJSON(steps.destroy.outputs.output).destroy }}
      region: ${{ fromJSON(steps.settings.outputs.output).settings.region }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Load destruction settings
        id: destroy
        uses: fabasoad/data-format-converter-action@main
        with:
          input: destroy.yml
          from: yaml
          to: json
      - name: Load environment application settings
        id: settings
        uses: fabasoad/data-format-converter-action@main
        with:
          input: ./infra/properties/${{ inputs.ENVIRONMENT }}.yml
          from: yaml
          to: json
  settings:
    needs: init
    name: Load application settings
    uses: ./.github/workflows/ext-load-application-settings.yml
    with:
      environment: ${{ inputs.ENVIRONMENT }}
  validate-install-dependencies:
    needs: settings
    name: Validate / Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Validating dependencies
        uses: actions/setup-java@v3.10.0
        with:
          java-version: 11
          distribution: temurin
      - name: Validating dependencies
        run: mvn --batch-mode dependency:analyze -f ./app/pom.xml -s ./app/settings.xml -Dserver.github.username=${{ github.actor }} -Dserver.github.password=${{ secrets.GH_PKG_ADMIN_TOKEN }}
  test-unit:
    needs:
      - settings
      - validate-install-dependencies
    name: Test / Unit
    runs-on: ubuntu-latest
    if: ${{ needs.settings.outputs.test-disable-unit != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Run unit tests
        run: mvn --batch-mode clean install -f ./app/pom.xml -s ./app/settings.xml -Dserver.github.username=${{ github.actor }} -Dserver.github.password=${{ secrets.GH_PKG_ADMIN_TOKEN }}
  test-mutation:
    needs:
      - settings
      - validate-install-dependencies
    name: Test / Mutation
    runs-on: ubuntu-latest
    if: ${{ needs.settings.outputs.test-disable-mutation != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
      - name: Run mutation tests
        run: mvn --batch-mode pitest:mutationCoverage -f ./app/pom.xml -s ./app/settings.xml -Dserver.github.username=${{ github.actor }} -Dserver.github.password=${{ secrets.GH_PKG_ADMIN_TOKEN }}
  deploy:
    needs:
      - settings
      - test-unit
      - test-mutation
    if: always() && needs.settings.result == 'success' && ((needs.settings.outputs.test-disable-unit == 'true' && needs.test-mutation.result == 'success') || (needs.settings.outputs.test-disable-mutation == 'true' && needs.test-unit.result == 'success') || (needs.settings.outputs.test-disable-unit == 'true' && needs.settings.outputs.test-disable-mutation == 'true') || (needs.test-unit.result == 'success' && needs.test-mutation.result == 'success'))
    name: Deploy to DEV
    environment:
      name: DEV
      url: ${{ steps.output.outputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: devops-app@${{ env.PROJECT_NAME }}.iam.gserviceaccount.com
      - name: Clean project
        run: ls -d */ | grep -v "app/\|infra/\|local/" | xargs rm -r
      - name: Docker Auth
        run: gcloud auth configure-docker ${{ inputs.GCP_REGISTRY }} --quiet
      - name: Build
        run: docker build -t ${{ env.IMAGE_PATH }} . -f app.dockerfile --build-arg APP_ENV=${{ inputs.ENVIRONMENT }} --build-arg GITHUB_ACTOR=${{ github.actor }} --build-arg GITHUB_TOKEN=${{ secrets.GH_PKG_ADMIN_TOKEN }}
      - name: Push
        run: docker push ${{ env.IMAGE_PATH }}
      - name: Deploy
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_PATH }} \
          --region ${{ needs.settings.outputs.region }} \
          --memory ${{ needs.settings.outputs.scaling-memory }} \
          --min-instances ${{ needs.settings.outputs.scaling-min-instances }} \
          --max-instances ${{ needs.settings.outputs.scaling-max-instances }} \
          --platform managed \
          --port ${{ needs.settings.outputs.port }} \
          --timeout ${{ needs.settings.outputs.scaling-timeout }} \
          --set-env-vars "ENABLE_SSL=${{ needs.settings.outputs.enable-ssl }}" \
          --execution-environment ${{ needs.settings.outputs.execution-environment }} \
          --ingress ${{ needs.settings.outputs.ingress }} \
          --cpu ${{ needs.settings.outputs.scaling-cpu }} \
          --concurrency ${{ needs.settings.outputs.scaling-concurrency }} ${{ (needs.settings.outputs.cpu-throttling && '--cpu-throttling') || '--no-cpu-throttling' }} \
          --service-account ${{ needs.settings.outputs.service-account }}@${{ env.PROJECT_NAME }}.iam.gserviceaccount.com \
          --allow-unauthenticated \
          --add-cloudsql-instances=${{ needs.settings.outputs.instances }}
      - name: Ouput
        run: echo "url="$(gcloud run services describe ${{ env.SERVICE_NAME }} --platform managed --region ${{ needs.settings.outputs.region }} --format 'value(status.url)') >> $GITHUB_OUTPUT
        id: output
  custom-command-execution:
    needs:
      - settings
      - deploy
    name: Custom command execution
    uses: ./.github/workflows/ext-gcp-execute-job-custom-command.yml
    with:
      command-entrypoint: ${{ needs.settings.outputs.command-entrypoint }}
      command-args: ${{ needs.settings.outputs.command-args }}
      region: ${{ needs.settings.outputs.region }}
      instances: ${{ needs.settings.outputs.instances }}
      service-account: ${{ needs.settings.outputs.service-account }}
      registry: ${{ inputs.GCP_REGISTRY }}
      environment: ${{ inputs.ENVIRONMENT }}
    secrets:
      project-number: ${{ secrets.GCP_PROJECT_NUMBER_DEV }}
      project-name: ${{ secrets.GCP_PROJECT_NAME }}
      service-name: ${{ secrets.GCP_SERVICE_NAME }}
  destroy:
    needs: init
    name: Destroy resources
    runs-on: ubuntu-latest
    if: ${{ needs.init.outputs.destroy == 'true' }}
    environment: DEV
    steps:
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: devops-app@${{ env.PROJECT_NAME }}.iam.gserviceaccount.com
      - name: Check if job exists
        id: job-status
        run: echo "status="$(gcloud run jobs describe ${{ env.SERVICE_NAME }} --region ${{ needs.init.outputs.region }} --format 'value(status.conditions[0].status)') >> $GITHUB_OUTPUT
      - name: Destroy job
        if: ${{ steps.job-status.outputs.status == 'True' }}
        run: gcloud run jobs delete ${{ env.SERVICE_NAME }} --region ${{ needs.init.outputs.region }} --quiet
      - name: Check if service exists
        id: service-status
        run: echo "status="$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ needs.init.outputs.region }} --format 'value(status.conditions[0].status)') >> $GITHUB_OUTPUT
      - name: Destroy service
        if: ${{ steps.service-status.outputs.status == 'True' }}
        run: gcloud run services delete ${{ env.SERVICE_NAME }} --region ${{ needs.init.outputs.region }} --quiet
  create-pr:
    needs:
      - custom-command-execution
      - destroy
    if: always() && (needs.custom-command-execution.result == 'success' || needs.destroy.result == 'success')
    name: Create PR to Main
    uses: ./.github/workflows/ext-create-pull-request-to-main.yml
