# .github/workflows/setup-repository-issue.yml
name: Process Request by Issue
on:
  workflow_call:
env:
  API: https://api.github.com
  ORG: ${{github.repository_owner}}
  SETUP: ${{github.event.repository.name}}
  NUMBER: ${{github.event.issue.number}}
jobs:
  prepare:
    name: Prepare
    permissions: read-all
    runs-on: ubuntu-latest
    outputs:
      requestType: "${{steps.labels.outputs.requestType}}"
      catalogType: "${{steps.labels.outputs.catalogType}}"
    steps:
      - name: Get issue labels
        id: labels
        run: |
          # Obter labels da issue
          issueLabels=$(gh api ${{env.API}}/repos/${{env.ORG}}/${{env.SETUP}}/issues/${{env.NUMBER}}/labels --template '{{. | pluck "name" | join ","}}')
          requestType="none"
          catalogType="none"
          
          if [[ "$issueLabels" == *"setup"* ]];
          then
            requestType="setup"
          elif [[ "$issueLabels" == *"purge"* ]];
          then
            requestType="purge"
          elif [[ "$issueLabels" == *"archive"* ]];
          then
            requestType="archive"
          elif [[ "$issueLabels" == *"change-visibility"* ]];
          then
              requestType="change-visibility"
          fi
          
          if [[ "$issueLabels" == *"application"* ]];
          then
            catalogType="application"
          elif [[ "$issueLabels" == *"dependency"* ]];
          then
            catalogType="dependency"
          elif [[ "$issueLabels" == *"module"* ]];
          then
              catalogType="module"
          fi
          
          echo "requestType=${requestType}" >> $GITHUB_OUTPUT
          echo "catalogType=${requestType}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{github.token}}
  process:
    needs: prepare
    name: Process
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      label: "${{steps.execute.outputs.label}}"
      message: "${{steps.execute.outputs.message}}"
    steps:
      - name: Get issue form as JSON
        id: form
        run: |
          declare -A issueArray 

          # Recuperar formulário da issue
          issueContent=$(gh api ${{env.API}}/repos/${{env.ORG}}/${{env.SETUP}}/issues/${{env.NUMBER}} --jq ".body")
          issueContent="$issueContent"

          # Organizar chave e valor baseado no conteúdo do formulário da issue
          previousItem=
          index=0
          IFS=$'\n'
          for item in $issueContent; do
              if (( $index % 2 == 0 )); then
                  previousItem="${item:4}"
              else
                issueArray["$previousItem"]="$item"
              fi

              index=$index+1
          done
        env:
          GH_TOKEN: ${{github.token}}
      - name: Execute script
        id: execute
        run: bash ${GITHUB_WORKSPACE}/src/process-issue-${{needs.prepare.outputs.requestType}}.sh
  finish:
    needs: [process]
    name: Finish
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Add label to issue
        run: gh api ${{env.API}}/repos/${{env.ORG}}/${{env.SETUP}}/issues/${{env.NUMBER}}/labels -X POST -f labels[]="${{needs.process.outputs.label}}"
      - name: Add comment to issue
        run: gh api ${{env.API}}/repos/${{env.ORG}}/${{env.SETUP}}/issues/${{env.NUMBER}}/comments -X POST -f body="${{needs.process.outputs.message}}"
      - name: Close issue
        run: gh api ${{env.API}}/repos/${{env.ORG}}/${{env.SETUP}}/issues/${{env.NUMBER}} -X POST -f state="closed"
        env:
          GH_TOKEN: ${{github.token}}
