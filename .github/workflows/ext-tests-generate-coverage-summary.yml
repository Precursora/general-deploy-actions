name: Generate Coverage Summary
on:
  workflow_call:
    inputs:
      unit-tests-report:
        type: string
        required: true
      mutation-tests-report:
        type: string
        required: true
jobs:
  generate-coverage-summary:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Coverage
        run: |
          echo "Constru√ß√£o de relat√≥rio de testes unit√°rios..."

          if [[ "${{inputs.unit-tests-report}}" != "" ]]; then
            unitMinimumCoverage=$(if (( ${{fromJSON(inputs.unit-tests-report).coverage}} < ${{fromJSON(inputs.unit-tests-report).minimum_coverage}} )); then echo "‚ùå"; else echo "‚úÖ"; fi)
            unitExecutionTime=$(printf "%02s" $((${{fromJSON(inputs.unit-tests-report).execution_time}}/60)))"m "$(printf "%02s" $((${{fromJSON(inputs.unit-tests-report).execution_time}}%60)))"s"
            summaryUnitTests="| Unit√°rio | ${{fromJSON(inputs.unit-tests-report).coverage}}% | ${{fromJSON(inputs.unit-tests-report).success}} | ${{fromJSON(inputs.unit-tests-report).error}} | ${{fromJSON(inputs.unit-tests-report).no_coverage}} | ${{fromJSON(inputs.unit-tests-report).skipped}} | ${unitExecutionTime} | ${{fromJSON(inputs.unit-tests-report).minimum_coverage}}% ${unitMinimumCoverage} |"
          else
            summaryUnitTests="| Unit√°rio | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå |"
          fi

          echo "Constru√ß√£o de relat√≥rio de testes mutantes..."


          summaryMutationTests="| Unit√°rio | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå | ‚ùå |"

          # Summary constrution
          summaryHeader="| Tipo | Cobertura üßê | Sucesso üòé | Falha ü•≤ | Sem cobertura üò¨ | Ignorado üòë | Tempo de execu√ß√£o ü•± | Cobertura m√≠nima atingida ü´£ |"
          summaryAlign="|:--|--|--|--|--|--|--|:--|"

          # Summary export
          summary="${summaryHeader}\n${summaryAlign}\n${summaryUnitTests}\n${summaryMutationTests}"
          echo -e "${summary}" >> $GITHUB_STEP_SUMMARY
