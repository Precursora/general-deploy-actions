name: Generate Coverage Summary
on:
  workflow_call:
    inputs:
      unit-tests-report:
        type: string
        required: true
      mutation-tests-report:
        type: string
        required: true
jobs:
  generate-coverage-summary:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Coverage
        run: |
          echo "Constru√ß√£o de relat√≥rio de testes unit√°rios..."

          if [[ "${{inputs.unit-tests-report}}" != "" ]]; then
            unitMinimumCoverage=$(if (( ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).coverage}} < ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).minimum_coverage}} )); then echo "‚ùå"; else echo "‚úÖ"; fi);
            unitExecutionTime=$(printf "%02s" $((${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).execution_time}}/60)))"m "$(printf "%02s" $((${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).execution_time}}%60)))"s"
            summaryUnitTests="| Unit√°rio | ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).coverage}}% | ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).success}} | ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).error}} | ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).no_coverage}} | ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).skipped}} | ${unitExecutionTime} | ${{inputs.unit-tests-report != '' && fromJSON(inputs.unit-tests-report).minimum_coverage}}% ${unitMinimumCoverage} |"
          else
            summaryUnitTests=""
          fi

          echo "Constru√ß√£o de relat√≥rio de testes mutantes..."

          if [[ "${{inputs.mutation-tests-report}}" != "" ]]; then
            mutationExecutionTime=$(printf "%02s" $((${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).execution_time}}/60)))"m "$(printf "%02s" $((${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).execution_time}}%60)))"s"
            mutationMinimumCoverage=$(if (( ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).coverage}} < ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).minimum_coverage}} )); then echo "‚ùå"; else echo "‚úÖ"; fi);
            summaryMutationTests="| Muta√ß√£o | ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).coverage}}% | ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).success}} | ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).error}} | ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).no_coverage}} | ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).skipped}} | ${mutationExecutionTime} | ${{inputs.mutation-tests-report != '' && fromJSON(inputs.mutation-tests-report).minimum_coverage}}% ${mutationMinimumCoverage} |"
          else
            summaryMutationTests=""
          fi

          # Summary constrution
          summaryHeader="| Tipo | Cobertura üßê | Sucesso üòé | Falha ü•≤ | Sem cobertura üò¨ | Ignorado üòë | Tempo de execu√ß√£o ü•± | Cobertura m√≠nima atingida ü´£ |"
          summaryAlign="|:--|--|--|--|--|--|--|:--|"

          # Summary export
          summary="${summaryHeader}\n${summaryAlign}\n${summaryUnitTests}\n${summaryMutationTests}"
          echo -e "${summary}" >> $GITHUB_STEP_SUMMARY
