name: Deploy to GCP - DEV
on:
  workflow_call:
    secrets:
      GCP_PROJECT_ID_DEV:
        required: true
      GCP_PROJECT_NAME_DEV:
        required: true
      GCP_SERVICE_NAME:
        required: true
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID_DEV }}
  PROJECT_NAME: ${{ secrets.GCP_PROJECT_NAME_DEV }}
  SERVICE: ${{ secrets.GCP_SERVICE_NAME }}-develop
  TF_VAR_FILE: ./environments/dev/terraform.tfvars
jobs:
  validation:
    name: Validation
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform format check
        run: terraform fmt -check
      - name: Terraform init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate -no-color
  deploy:
    needs: validation
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: 'projects/${{ env.PROJECT_ID }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          service_account: 'devops-infra@${{ env.PROJECT_NAME }}.iam.gserviceaccount.com'
      - name: Setup backend
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "gcs" {
              bucket  = "${{ env.PROJECT_NAME }}-state-files"
              prefix  = "${{ env.SERVICE }}"
            }
          }
          EOF
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Load destruction settings
        id: destroy
        uses: fabasoad/data-format-converter-action@main
        with:
          input: destroy.yml
          from: yaml
          to: json
      - name: Terraform init
        run: terraform init
      - name: Terraform destroy
        if: fromJSON(steps.destroy.outputs.output).destroy.enabled == true
        run: |
          resources=($(echo '${{ toJSON(fromJSON(steps.destroy.outputs.output).destroy.resources) }}' | sed -e "s/,/ /g" -e "s/[]['\"]//g"))

          if [ ${#resources[*]} -ne 0 ]; then
            for i in ${resources[@]}; do
              terraform destroy -target=${i} -auto-approve -var-file="${{ env.TF_VAR_FILE }}";
            done
          else
            terraform destroy -auto-approve -var-file="${{ env.TF_VAR_FILE }}";
          fi
      - name: Terraform plan
        if: fromJSON(steps.destroy.outputs.output).destroy.enabled != true
        run: terraform plan -var-file="${{ env.TF_VAR_FILE }}"
      - name: Terraform apply
        if: fromJSON(steps.destroy.outputs.output).destroy.enabled != true
        run: terraform apply -auto-approve -var-file="${{ env.TF_VAR_FILE }}"
