name: Deploy to GCP - DEV
on:
  workflow_call:
    secrets:
      GCP_PROJECT_NUMBER_DEV:
        required: true
      GCP_PROJECT_NAME:
        required: true
      GCP_SERVICE_NAME:
        required: true
env:
  PROJECT_NUMBER: ${{ secrets.GCP_PROJECT_NUMBER_DEV }}
  PROJECT_NAME: ${{ secrets.GCP_PROJECT_NAME }}-dev
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}-dev
  TF_VAR_FILE: ./environments/dev/terraform.tfvars
permissions: write-all
jobs:
  init:
    name: Initialization
    uses: ./.github/workflows/ext-initialization-application-properties.yml
  validation:
    needs: init
    name: Validation
    runs-on: ubuntu-latest
    if: ${{ needs.init.outputs.destroy == 'false' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform format check
        run: terraform fmt -check
      - name: Terraform init
        run: terraform init
      - name: Terraform Validate
        run: terraform validate -no-color
  deploy:
    needs: validation
    name: Deploy
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: devops-infra@${{ env.PROJECT_NAME }}.iam.gserviceaccount.com
      - name: Setup backend
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "gcs" {
              bucket  = "${{ env.PROJECT_NAME }}-state-files"
              prefix  = "${{ env.SERVICE_NAME }}"
            }
          }
          EOF
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform init
        run: terraform init
      - name: Terraform plan
        run: terraform plan -var-file="${{ env.TF_VAR_FILE }}"
      - name: Terraform apply
        run: terraform apply -auto-approve -var-file="${{ env.TF_VAR_FILE }}"
  destroy:
    needs: init
    name: Destroy
    runs-on: ubuntu-latest
    if: ${{ needs.init.outputs.destroy != 'false' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: GCP Auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: devops-infra@${{ env.PROJECT_NAME }}.iam.gserviceaccount.com
      - name: Terraform destroy
        run: |
          if [[ "${{needs.init.outputs.destroy}}" == "" || "${{needs.init.outputs.destroy}}" == "true" ]]; then
            echo "Destroying all resources...";
            terraform destroy -auto-approve -var-file="${{ env.TF_VAR_FILE }}";
          else
            resources=("${{ join(fromJson(needs.init.outputs.destroy), '" "') }}");

            IFS='%|%'

            if [ ${#resources[*]} -ne 0 ]; then
              for i in "${resources[@]}"; do
                echo "Destroying ${i}...";
                terraform destroy -target=${i} -auto-approve -var-file="${{ env.TF_VAR_FILE }}";
              done
            fi
          fi
  create-pr:
    needs:
      - deploy
      - destroy
    if: always() && ((needs.deploy.result == 'success') || needs.destroy.result == 'success')
    name: Create PR to Main
    uses: ./.github/workflows/ext-create-pull-request-to-main.yml
