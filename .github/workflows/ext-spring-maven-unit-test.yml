name: Unit tests
on:
  workflow_call:
    inputs:
      path:
        type: string
        required: false
      report-index-file:
        type: string
        required: false
        default: target/site/jacoco/index.html
      report-surefire-file:
        type: string
        required: false
        default: target/surefire-reports/*.txt
      minimum-coverage:
        type: number
        required: true
      sha:
        type: string
        required: true
    outputs:
      indexes:
        value: ${{jobs.unit-tests.outputs.indexes}}
    secrets:
      token:
        required: false
jobs:
  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest
    outputs:
      indexes: ${{steps.export.outputs.indexes}}
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: corretto
          cache: maven
      - name: Run tests
        continue-on-error: true
        run: |
          mvn -B clean jacoco:prepare-agent install -f ${{ inputs.path }}pom.xml -s ${{ inputs.path }}settings.xml \
              -Dserver.github.username=${{ github.repository_owner }} \
              -Dserver.github.password=${{ secrets.token || secrets.GH_PRECURSORA_DEFAULT_PAT }}
      - name: Generate reports
        run: mvn -B jacoco:report
      - name: Export indexes
        id: export
        run: |
          index=${{inputs.path}}${{inputs.report-index-file}}
          surefire=${{inputs.path}}${{inputs.report-surefire-file}}

          if [[ -e "${index}" ]]; then
            error=$(grep -Eo '[Failures|Errors]: [0-9]*' ${surefire} | cut -d':' -f3 | awk '{s+=$1} END {print s}')
            skipped=$(grep -Eo 'Skipped: [0-9]*' ${surefire} | cut -d':' -f3 | awk '{s+=$1} END {print s}')
            executionTime=$(grep -Eo 'elapsed: [0-9\.]*' ${surefire} | cut -d':' -f3 | awk '{s+=$1} END {print s}')
            coverage=$(grep -Eo 'Total[^%]*[^>]*%' ${index} | cut -d'%' -f1 | cut -d'>' -f5)
            total=$(grep -Eo 'Total[^%]*[^>]*%' ${index} | cut -d'>' -f3 | cut -d'<' -f1 | cut -d' ' -f3)
            noCoverage=$(grep -Eo 'Total[^%]*[^>]*%' ${index} | cut -d'>' -f3 | cut -d'<' -f1 | cut -d' ' -f1)
            success=$(($total-$noCoverage))

            if [ ! -e $surefire ]; then
              error=0
              skipped=0
              executionTime=0
            fi
          else
            error=0
            skipped=0
            executionTime=0
            coverage=0
            noCoverage=0
            success=0
          fi

          echo 'indexes={"minimum_coverage":"${{inputs.minimum-coverage}}","coverage":"'${coverage}'","success":"'${success}'","error":"'${error}'","no_coverage":"'${noCoverage}'","skipped":"'${skipped}'","execution_time":"'${executionTime}'"}' >> $GITHUB_OUTPUT
          echo 'coverage='${coverage} >> $GITHUB_OUTPUT
          echo 'description=Min: ${{inputs.minimum-coverage}}% • Cov: '${coverage}'% • Suc: '${success}' • Err: '${error}' • Skip: '${skipped}' • Uncov: '${noCoverage} >> $GITHUB_OUTPUT
      - name: Validate coverage
        run: |
          state=failure
          
          if (( ${{steps.export.outputs.coverage}} < ${{inputs.minimum-coverage}} )); then
            echo "#### ❌ Cobertura mínima de ${{inputs.minimum-coverage}}% não atingida" >> $GITHUB_STEP_SUMMARY
          else
            state=success
            echo "#### ✅ Cobertura mínima de ${{inputs.minimum-coverage}}% atingida" >> $GITHUB_STEP_SUMMARY
          fi

          gh api /repos/${{github.repository}}/statuses/${{inputs.sha}} -X POST -f state=${state} -f description='${{steps.export.outputs.description}}' -f context='${{github.action.name}}'
        env:
          GH_TOKEN: ${{secrets.token || github.token}}
